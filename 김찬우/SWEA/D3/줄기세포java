import java.io.*;
import java.util.*;
 
public class Solution {
 
    static int n,m,k;
    //static int[][] map = new int[400][400];
 
    public static int[][] map;
    static ArrayList<int[]> list;
    static int[] dx = {0,1,0,-1};
    static int[] dy = {1,0,-1,0};
 
    public static void main(String args[]) throws Exception
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int T = Integer.parseInt(st.nextToken());
 
        for(int test_case = 1; test_case <= T; test_case++)
        {
            list = new ArrayList<>();
 
            st = new StringTokenizer(br.readLine());
            n = Integer.parseInt(st.nextToken());
            m = Integer.parseInt(st.nextToken());
            k = Integer.parseInt(st.nextToken());
            map = new int[400][400];
 
            for (int i=0; i<n; i++) {
 
                st = new StringTokenizer(br.readLine()," ");
 
                for (int j=0; j<m; j++) {
 
                    int r = 200 + i;
                    int c = 200 + j;
 
                    map[r][c] = Integer.parseInt(st.nextToken());
 
                    if (map[r][c] != 0 ) {
                        list.add(new int[] {r,c,map[r][c],0});
                    }
 
                }
 
            }
 
            for (int cur=1; cur<=k; cur++) {
 
                Collections.sort(list, new Comparator<int[]>() {
 
                    @Override
                    public int compare(int[] o1, int[] o2) {
                        return  o1[2] - o2[2];
                    }
                });
 
                for (int idx = list.size() - 1; idx >= 0; idx--) {
 
                    int[] node = list.get(idx);
 
                    int x = node[0];
                    int y = node[1];
                    int vitality = node[2];
                    int birth = node[3];
 
                    // 세포 죽이기
 
                    if (vitality*2 == cur-birth) {
                        list.remove(idx);
                    }
 
                    // 번식
                    if (vitality + 1 == cur - birth) {
 
                        for (int j = 0; j < 4; j++) {
                            int nx = x + dx[j];
                            int ny = y + dy[j];
 
                            if (map[nx][ny] == 0 ) {
                                map[nx][ny] = vitality;
                                        list.add(new int[]{nx,ny,vitality,cur});
                            }
 
                        }
 
                    }
 
 
                }
 
 
            }
 
            System.out.println("#"+test_case+" "+list.size());
 
 
        }
    }
}
